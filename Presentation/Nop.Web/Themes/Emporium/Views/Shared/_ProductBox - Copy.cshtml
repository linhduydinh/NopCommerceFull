@model WishlistModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject CatalogSettings catalogSettings
@inject IViewComponentSelector viewComponentSelector

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    //if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    //{
    //    addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model., shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    //}
    //else
    //{
    //    addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    //}

    //var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    //var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var storeId = storeContext.CurrentStore.Id;
}

@foreach (var item in Model.Items)
{
    <div class="item-box">
        <div class="product-item" data-productid="@item.ProductId">
            <div class="picture">
                <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" title="@item.Picture.Title">
                    @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                    {
                        @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[]
                        {
                            ("src", item.Picture.ImageUrl),
                            ("alt", item.Picture.AlternateText),
                            ("title", item.Picture.Title),
                            ("class", "picture-img")
                        })
                    }
                    else
                    {
                        <img class="picture-img" src="@item.Picture.ImageUrl"
                             alt="@item.Picture.AlternateText" title="@item.Picture.Title" />
                    }
                </a>
                <div class="btn-wrapper">
                    <button type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog();return false;">@T("ShoppingCart.AddToWishlist")</button>
                </div>
            </div>
            <div class="details">
                <h2 class="product-title">
                    <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})">@item.ProductName</a>
                </h2>
                @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(item.Sku))
                {
                    <div class="sku">
                        @item.Sku
                    </div>
                }
                <div class="add-info">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                    <div class="prices">
                        @*@if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                            {
                                <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                            }*@
                        <span class="price actual-price">@item.UnitPrice</span>
                        @*@if (Model.ProductPrice.DisplayTaxShippingInfo)
                            {
                                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                //of course, you can modify appropriate locales to include VAT info there
                                <span class="tax-shipping-info">
                                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                                </span>
                            }*@
                        @*@if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                            {
                                <div class="base-price-pangv">
                                    @Model.ProductPrice.BasePricePAngV
                                </div>
                            }*@
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                    <div class="buttons">
                        @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                        @*@if (!Model.ProductPrice.DisableBuyButton)
                            {
                                var addToCartText = T("ShoppingCart.AddToCart").Text;
                                if (Model.ProductPrice.IsRental)
                                {
                                    addToCartText = T("ShoppingCart.Rent").Text;
                                }
                                if (Model.ProductPrice.AvailableForPreOrder)
                                {
                                    addToCartText = T("ShoppingCart.PreOrder").Text;
                                }
                                <input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                            }*@
                        <input type="button" value="@(T("ShoppingCart.AddToCart").Text)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
                </div>
            </div>
        </div>
    </div>
    }
